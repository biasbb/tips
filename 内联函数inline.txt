Inline这个名称就可以反映出它的工作方式，函数会在它所调用的位置上展开。这么做可以消除函数调用和返回所带来的开销（寄存器存储和恢复），而且，由于编译器会把调用函数的代码和函数本身放在一起优化，所以也有进一步优化代码的可能。不过这么做是有代价的，代码会变长，这就意味着占用更多的内存空间或者占用更多的指令缓存。
内核开发者通常把那些对时间要求比较高，而本身长度又比较短的函数定义成内联函数。如果你把一个大块头的程序做成了内联函数，却不需要争分夺秒，反而反复调用它，这么做就失去了内联的意义了。


总结：对于简短的函数并且调用次数比较多的情况，适合使用内联函数。
通过占用更多空间资源来得到更快的速度。
关键字 inline 必须与函数定义体放在一起才能使函数成为内联，仅将 inline 放在函数声明前面不起任何作用。

如下风格的函数 Foo 不能成为内联函数：

复制代码 代码如下:

inline void Foo(int x, int y);   // inline 仅与函数声明放在一起   
void Foo(int x, int y)
{
 ...
} 
而如下风格的函数 Foo 则成为内联函数：

复制代码 代码如下:

void Foo(int x, int y);   
inline void Foo(int x, int y)   // inline 与函数定义体放在一起
{
 ...

}